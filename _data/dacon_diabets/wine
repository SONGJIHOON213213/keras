from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split
from tensorflow.python.keras.callbacks import EarlyStopping
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.metrics import accuracy_score

# Load data
path = './_data/wine/'  
train_csv = pd.read_csv(path + 'train.csv', index_col=0)
test_csv = pd.read_csv(path + 'test.csv', index_col=0)

# Preprocess data
enc = OneHotEncoder()
y = train_csv['quality'].values
y = y.reshape(-1,1)
y = enc.fit_transform(y).toarray()

x = train_csv.drop(['quality'], axis=1)
x_test = test_csv.copy()

scaler = MinMaxScaler()
x_train = scaler.fit_transform(x)
x_test = scaler.transform(x_test)

# Split data into training and validation sets
x_train, x_val, y_train, y_val = train_test_split(x_train, y, shuffle=True, train_size=0.7, random_state=850) 

# Build model
model = Sequential([
    Dense(128, activation='relu', input_shape=(12,)),
    Dropout(0.1),
    Dense(64, activation='relu'),
    Dropout(0.1),
    Dense(32, activation='relu'),
    Dropout(0.1),
    Dense(7, activation='softmax')
])

# Compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train model
es = EarlyStopping(monitor='val_loss', mode='auto', verbose=1, restore_best_weights=True, patience=80)
model.fit(x_train, y_train, epochs=700, batch_size=32, validation_data=(x_val, y_val), callbacks=[es])

# Evaluate model
y_pred = model.predict(x_val)
y_pred = enc.inverse_transform(y_pred)
y_val = enc.inverse_transform(y_val)
acc = accuracy_score(y_val, y_pred)
print('Validation accuracy:', acc)

# Generate predictions for test data
y_test_pred = model.predict(x_test)
y_test_pred = enc.inverse_transform(y_test_pred)
test_csv['quality'] = y_test_pred
test_csv['quality'] = test_csv['quality'].astype(int)

# Save submission file
submission_filename = path + 'wine_submission.csv'
test_csv.to_csv(submission_filename)
print('Submission saved to', submission_filename)