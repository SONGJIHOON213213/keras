(Mean Squared Error)
💡 머신러닝뿐만 아니라 영상처리 영역에서도 자주 사용되는 추측값에 대한 정확성을 측정하는 방법이다. 
추정한 값에 대한 정확도를 측정하는 쉬운 방법이기 때문에 자주 쓰인다.2021. 7. 23. 
train_test_split( )는 랜덤으로 데이터를 분리하므로 random_state를 설정하지 않으면 
수행할 때마다 다른 학습/테스트 데이터 세트가 생성된다. 따라서 random_state를 설정하여 수행 시 결과값을 동일하게 맞춰주는 것이다.

R2


R2 score가 통계학에서는 결정계수라고 불리는데 머신러닝 분야에서도 통계학에서 의미하는 바랑 동일한가요?

통계학에서의 선형회귀 파트에서 결정계수를 다룰 때 결정계수란, 주어진 데이터들에 기반해 만들어진 선형(linear)이 주어진 데이터들을 얼마나 잘 '설명하는가'에 대한 수치

Pandas는 파이썬에서 사용하는 데이터분석 라이브러리로, 행과 열로 이루어진 
데이터 객체를 만들어 다룰 수 있게 되며 보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구 입니다. 

칼럼(Column)은 단어 그대로 열을 의미하며, 행과 열을 가진 데이터에서 열은 모두 칼럼이라고 불린다.
변수(Variable), 속성(Attribute), 필드(Field)라고도 불린다. 데이터에서 객체(대상)가 가지고 있는 특징이 들어간다. 

인덱스(index, 색인)는 위치 값을 뜻하는데 국어사전 옆면에 ㄱ, ㄴ, ㄷ으로 표시해 놓은 것과 비슷합니다. 
여기서 주의할 점은 시퀀스 객체의 인덱스는 항상 0부터 시작한다는 점입니다


데이터 프레임의 info() 함수는 데이터에 대한 전반적인 정보를 나타냅니다.
데이터 프레임을 구성하는 행과 열의 크기, 컬럼명, 컬럼을 구성하는 데이터 유형, 결측치 등 다양한 정보를 출력 해줍니다.


NumPy의 배열의 형태는 shape()함수를 사용합니다.
import numpy as np

a = np.array([[0, 1, 2], [3, 4, 5]])    # 2 x 3의 NumPy 2차원 배열 생성

print(np.shape(a)) 


1. 어째서 평균제곱근오차(RMSE)를 사용하는 것일까?
분산 대신 표준편차를 사용하는 이유와 비슷한데, 평균제곱오차는 실제 오차의 편차 평균이 아니라, 오차의 편차 제곱의 평균이기 때문에, 실제 편차를 반영한다고 볼 수 없다.
이는 평균제곱오차의 장점이자 단점으로 "큰 오류를 작은 오류에 비해 확대시킨다"는 것을 제곱근을 사용함으로써 어느 정도 보정할 수 있다.
예를 들어, (1-0.01)과 (1.0.95)의 차이와 (1-0.01)^2과 (1-0.95)^2의 차이를 비교해보자.
>>> print((1-0.01) - (1-0.95))
>>> print(np.round((1-0.01)**2 - (1-0.95)**2, 3)) 
0.94
0.978
위를 보면, 편차의 제곱을 하는 것이 그렇지 않은 것보다 차이가 크게 확대되는 것을 알 수 있다.
때문에, 이를 보정해주기 위해  제곱근(Root)을 사용하는 것이다.
 

물론, 제곱근을 사용한다고 하여, 평균절대값오차(MAE)에 비해 실제 편차라고 할 수는 없으나, MSE가 편차를 제곱시켜, 
큰 오류를 작은 오류보다 확대시킨다는 장점은 제곱근을 사용하여도 유지되기 때문에 오차의 존재를 인지하는 데엔 더욱 도움이 된다.
평균절대값오차(MAE)는 0에서 미분이 불가능하기 때문에 경사하강법을 이용해 최적의 값에 가까워지더라도 이동거리가 일정해 최적 값에 수렴하지 않으므로, 개인적으로는 추천하지 않는다.
즉, "평균제곱근오차(RMSE)는 제곱근을 사용함으로써 평균제곱오차(MSE)의 왜곡을 줄여주기 때문에 오차를 보다 실제 편차와 유사하게 볼 수 있게 되어 사용한다"라고 할 수 있다.
평균제곱근오차(RMSE) 역시 연속형 데이터를 대상으로 할 때 사용한다

isunull
결측값 확인 할때 쓰는 명령어.

결측값(missing value)란 데이터에서 값이 비어있는 경우를 말합니다. 
판다스에서는 numpy 의 nan 을 사용해서 결측값을 표시합니다.
 axis = 1 열방향
axis = 0 행방향

def
지금 작성하는 코드들은 짧은 코드지만 코드가 길어지면 반복되는 코드들이 생기고



코드들을 재사용할 수 없을까 하는 생각들이 들 수 있을 겁닌다.



함수의 목적은 코드의 재사용성도 그 중 하나입니다.



만약 사람이름만 바뀌고 아래와 같이 출력되어야 하는 메시지가 있다고 하겠습니다.

print("철수는 집에 가는데 10분이 걸립니다")
print("영희는 집에 가는데 20분이 걸립니다")
print("영수는 집에 가는데 40분이 걸립니다")
하지만 함수를 이용하면 아래와 같이 바뀝니다.

def estimate_time(name, time):
    print("%s는 집에 가는데 %d분이 걸립니다" % (name, time))

estimate_time("철수", 10)
estimate_time ("영희", 20)
estimate_time("영수", 40)
이게 1000줄, 10000줄이 된다면 더더욱 그 활용성은 높아지겠죠?^^